//https://www.pepcoding.com/resources/online-java-foundation/recursion-with-arraylists/get-maze-path-with-jumps-official/ojquestion

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int n= scn.nextInt(), m = scn.nextInt();
    ArrayList<String> paths = getMazePaths(0, 0, n-1, m-1);
    System.out.println(paths);
    }

    // sr - source row
    // sc - source column
    // dr - destination row
    // dc - destination column
    public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
        
       ArrayList<String> res = new ArrayList<>();
       
       if(sr==dr && sc==dc){
            res.add("");
            return res;
        }
        
        if(sr>dr || sc>dc){
            return res;
        }
        
         
        for(int h = 1; h<= (dc - sc); h++){
            ArrayList<String> rres = getMazePaths(sr, sc+h , dr, dc);
            for(String curr: rres){
                res.add("h" + h + curr);
            }
        }
        
        for(int v = 1; v <= (dr-sr); v++){
            ArrayList<String> rres = getMazePaths(sr+v, sc, dr, dc);
            for(String curr: rres){
                res.add("v" + v + curr);
            }
        }
        
        for(int d = 1 ; d <= (dr-sr) && d <= (dc-sc); d++){
            ArrayList<String> rres = getMazePaths(sr+d , sc+ d, dr, dc);
            for(String curr: rres){
                res.add("d" + d + curr);
            }
        }
        
        return res;
    }

}
