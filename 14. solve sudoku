// import java.io.*;
import java.util.*;

public class Main {
  public static void display(int[][] board) {
    for (int i = 0; i < board.length; i++) {
      for (int j = 0; j < board[0].length; j++) {
        System.out.print(board[i][j] + " ");
      }
      System.out.println();
    }
  }

    public static boolean isValid(int[][] board, int r, int c, int val){
        
        //check in current row
        for(int j=0; j<board[0].length ; j++){
            if(board[r][j] == val){
                return false;
            }
        }
        
        //check in current column
        for(int i = 0; i < board.length ; i++){
            if(board[i][c] == val){
                return false;
            }
        }
        
        //check in submatrix ==> for that find the starting index of that submatrix 
        //smr = submatrix row index = (r/3) * 3,
        //smc = submatrix col index = (c/3) * 3
        
        int smr = r / 3 * 3, smc = c / 3 * 3;
        
        for(int i = 0 ; i < 3 ; i++){
            for(int j = 0 ; j < 3 ; j++){
                if(board[smr + i][smc + j] == val){
                    return false;
                }
            }
        }
        
        return true;
    }
    
  public static void solveSudoku(int[][] board, int i, int j) {
    // write yopur code here
    
    if(i == board.length){
        display(board);
        return;
    }
    
    int ni= 0, nj = 0 ; // ni = next i, nj = next j
    if(j == board[0].length - 1){
        ni = i + 1;
        nj = 0;
    }else{
        ni = i;
        nj = j + 1;
    }
    
    if(board[i][j] != 0){
        solveSudoku(board, ni, nj);
    }else{
        for(int po = 1 ; po <= 9 ; po++){       //po = possible options
            if(isValid(board, i, j, po)){
                board[i][j] = po;
                solveSudoku(board, ni, nj);
                board[i][j] = 0;
            }
        }
    }
  }

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int[][] arr = new int[9][9];
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        arr[i][j] = scn.nextInt();
      }
    }

    solveSudoku(arr, 0, 0);
  }
}
